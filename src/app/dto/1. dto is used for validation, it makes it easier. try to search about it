//sample
IMPORTANT "npm install zod" before doing this

filename: persone.dto.ts

import { z } from 'zod';

export const PersonDto = z.object({
  firstName: z.string().min(1, 'First name is required'),
  lastName: z.string().min(1, 'Last name is required'),
  dob: z.string().min(1, 'Date of birth is required'), // Can be enhanced later
  address: z.string().min(1, 'Address is required'),
  gender: z.string().min(1, 'Gender is required'),
});

export type PersonDtoType = z.infer<typeof PersonDto>;

=======================================
or

filename: signup.dto.ts

import { z } from 'zod';

export const SignUpDto = z.object({
  firstName: z.string().min(1, 'First name is required'),
  lastName: z.string().min(1, 'Last name is required'),
  email: z.string().email('Invalid email address'),
  password: z.string().min(6, 'Password must be at least 6 characters'),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ['confirmPassword'],
});

export type SignUpDtoType = z.infer<typeof SignUpDto>;

or

export const SignUpDto = z
  .object({
    firstName: z.string().min(1, 'First name is required'),
    lastName: z.string().min(1, 'Last name is required'),
    email: z.string().email('Invalid email address'),

    password: z
      .string()
      .min(6, 'Password must be at least 6 characters long')
      .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')
      .regex(/[0-9]/, 'Password must contain at least one number'),

    confirmPassword: z.string(),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ['confirmPassword'],
  });

export type SignUpDtoType = z.infer<typeof SignUpDto>;
